//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "Cocos2dEngine\OpenGLESPage.xaml.h"

void ::BBPlayer::OpenGLESPage::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///Cocos2dEngine/OpenGLESPage.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class BBPlayer::OpenGLESPage::OpenGLESPage_obj1_Bindings 
    : public ::XamlBindingInfo::XamlBindingsBase<::BBPlayer::OpenGLESPage>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
public:
    OpenGLESPage_obj1_Bindings()
    {
        InitializeTracking(this);
    }

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 3:
                this->obj3 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                break;
            case 11:
                this->obj11 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                break;
        }
    }
private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::Grid^ obj3;
    ::Windows::UI::Xaml::Controls::Grid^ obj11;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;

    // Update methods for each path node used in binding steps.
    void Update_(::BBPlayer::OpenGLESPage^ obj, int phase)
    {
					this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_CoreTitleBarHeight(obj->CoreTitleBarHeight, phase);
                this->Update_CoreTitleBarPadding(obj->CoreTitleBarPadding, phase);
            }
        }
    }
    void Update_CoreTitleBarHeight(::default::float64 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_FrameworkElement_Height(this->obj3, obj);
        }
    }
    void Update_CoreTitleBarPadding(::Windows::UI::Xaml::Thickness obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            ::XamlBindingInfo::XamlBindingSetters::Set_Windows_UI_Xaml_Controls_Grid_Padding(this->obj11, obj);
        }
    }

    virtual void ReleaseAllListeners() override
    {
					this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::BBPlayer::OpenGLESPage^ obj = safe_cast<::BBPlayer::OpenGLESPage^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_CoreTitleBarHeight(obj->CoreTitleBarHeight, DATA_CHANGED);
                    this->Update_CoreTitleBarPadding(obj->CoreTitleBarPadding, DATA_CHANGED);
                }
            }
            else if (propName == "CoreTitleBarHeight")
            {
                if (obj != nullptr)
                {
                    this->Update_CoreTitleBarHeight(obj->CoreTitleBarHeight, DATA_CHANGED);
                }
            }
            else if (propName == "CoreTitleBarPadding")
            {
                if (obj != nullptr)
                {
                    this->Update_CoreTitleBarPadding(obj->CoreTitleBarPadding, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
};

void ::BBPlayer::OpenGLESPage::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
        case 2:
            {
                this->RootGrid = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
            }
            break;
        case 3:
            {
                this->TitleBar = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
            }
            break;
        case 4:
            {
                this->swapChainPanel = safe_cast<::Windows::UI::Xaml::Controls::SwapChainPanel^>(__target);
            }
            break;
        case 5:
            {
                this->cocos2d_editbox = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
            }
            break;
        case 6:
            {
                this->cocos2d_editbox_flyout = safe_cast<::Windows::UI::Xaml::Controls::Flyout^>(__target);
            }
            break;
        case 7:
            {
                this->cocos2d_editbox_grid = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
            }
            break;
        case 8:
            {
                this->cocos2d_editbox_done = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
            }
            break;
        case 9:
            {
                this->cocos2d_editbox_cancel = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
            }
            break;
        case 10:
            {
                this->BackgroundElement = safe_cast<::Windows::UI::Xaml::Shapes::Rectangle^>(__target);
            }
            break;
        case 12:
            {
                this->AppName = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
            }
            break;
        case 13:
            {
                this->FullScreenModeToggle = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
                (safe_cast<::Windows::UI::Xaml::Controls::Button^>(this->FullScreenModeToggle))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::BBPlayer::OpenGLESPage::*)
                    (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&OpenGLESPage::OnFullScreenModeToggleClick);
            }
            break;
    }
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::BBPlayer::OpenGLESPage::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1:
            {
                ::Windows::UI::Xaml::Controls::Page^ element1 = safe_cast<::Windows::UI::Xaml::Controls::Page^>(__target);
                OpenGLESPage_obj1_Bindings* objBindings = new OpenGLESPage_obj1_Bindings();
                objBindings->SetDataRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
            }
            break;
    }
    return bindings;
}


